# 다형성(polymorphism)

'여러 형태를 가질 수 있는 능력'으로 상속과 밀접한 관련이 있다. 자바는 한 타입의 참조변수로 여러 타입의 객체 변수를 참조할 수 있도록 함으로써 다형성을 구현하였다.

즉, 부모클래스 타입의 참조변수로 자식클래스의 인스턴스를 참조할 수 있도록 하였다. 

```java
 class Bird {
    boolean wing; // 날개
    void fly() {
        System.out.println("파닥파닥");
    }
 }

 class Duck extends Bird {
    void quack() {
        System.out.println("꽥꽥");
    }
 }
 ```

 `Bird`와 `Duck`은 서로 상속관계에 있으며, 이 두 클래스의 인스턴스를 생성하고 사용하려면 아래와 같이 진행한다.

 ```java
 Bird b = new Bird();
 Duck d = new Duck();
 ```

 이는 인스턴스의 타입과 일치하는 타입의 참조변수를 사용한 것이다. 하지만 두 클래스가 위와 같이 상속관계에 있는 경우, 부모 클래스 타입의 참조변수로 자식 클래스의 인스턴스를 참조하게 하는 것도 가능하다.

 ```java
 Bird b = new Duck();
 ```

#

 그럼 이제 두 경우의 차이를 알아보자.

1)  ```java 
    Duck d = new Duck();
    ```
    인스턴스는 `Duck` 형이고, `Bird`와 `Duck`의 모든 인스턴스 멤버들을 사용할 수 있다.

2) ```java
   Bird b = new Duck();
   ```
   인스턴스는 `Duck`형으로 동일하지만, `Duck`의 인스턴스 중에서 `Bird`의 멤버(상속받은 멤버 포함)만 사용할 수 있다. 따라서 참조변수 `b`로 `Bird`클래스에 정의되지 않은 멤버 호출인 `b.quack()`등은 사용이 불가능하다.

#

그렇다면 아래와 같이 자식클래스의 참조변수로 부모타입의 인스턴스를 참조할 수 있을까?

```java
Duck d = new Bird();
```

불가능하다(컴파일 에러가 발생한다). 이는 실제 인스턴스인 `Bird`의 멤버 개수보다 참조변수 `d`가 사용할 수 있는 멤버의 개수가 많기 때문이다.

> 참조변수가 사용할 수 있는 멤버의 개수는 인스턴스의 멤버 개수보다 많아야 한다.

클래스는 상속을 통해 확장될 수는 있어서 부모 인스턴스의 멤버 개수는 자식 인스턴스의 멤버 개수보다 항상 적거나 같다. 즉, 상위 클래스의 참조변수로 자식 클래스의 인스턴스를 생성하는 것만이 허용된다.

#

### 참조변수의 형변환

